name: Build Kolla OpenStack Images

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      build_target:
        description: 'What to build (leave empty for all services)'
        required: false
        default: ''
        type: string
      base_distro:
        description: 'Base distribution'
        required: false
        default: 'ubuntu'
        type: choice
        options:
          - ubuntu
          - rocky
          - debian
      openstack_release:
        description: 'OpenStack release version'
        required: false
        default: '2024.2'
        type: choice
        options:
          - '2024.2'
          - '2025.1'
          - 'master'
      push_images:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  OWNER: fivetime

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Kolla
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install kolla docker

      - name: Set build variables
        id: vars
        run: |
          # 设置所有服务列表
          ALL_SERVICES="keystone glance nova neutron cinder placement heat horizon aodh barbican blazar ceilometer cloudkitty cyborg designate gnocchi ironic ironic-inspector magnum manila masakari mistral octavia tacker trove venus watcher zun cron etcd fluentd haproxy hacluster keepalived kolla-toolbox letsencrypt mariadb memcached opensearch openvswitch ovn ovsdpdk proxysql rabbitmq redis tgtd collectd dnsmasq grafana influxdb iscsid multipathd networking-baremetal prometheus skyline telegraf bifrost kuryr"
          
          # 确定要构建的服务
          if [ -z "${{ inputs.build_target }}" ]; then
            BUILD_SERVICES="$ALL_SERVICES"
            echo "Building all services"
          else
            BUILD_SERVICES="${{ inputs.build_target }}"
            echo "Building specified services: $BUILD_SERVICES"
          fi
          
          # 生成标签（格式：版本-系统_代号）
          BASE_DISTRO="${{ inputs.base_distro || 'ubuntu' }}"
          RELEASE="${{ inputs.openstack_release || '2024.2' }}"
          
          case "$BASE_DISTRO" in
            ubuntu)
              OS_TAG="ubuntu_noble"  # Ubuntu 24.04 Noble
              ;;
            debian)
              OS_TAG="debian_bookworm"  # Debian 12 Bookworm
              ;;
            rocky)
              OS_TAG="rocky_9"  # Rocky Linux 9
              ;;
            *)
              OS_TAG="ubuntu_noble"
              ;;
          esac
          
          FULL_TAG="${RELEASE}-${OS_TAG}"
          
          echo "build_services=$BUILD_SERVICES" >> $GITHUB_OUTPUT
          echo "full_tag=$FULL_TAG" >> $GITHUB_OUTPUT
          echo "os_tag=$OS_TAG" >> $GITHUB_OUTPUT
          
          echo "Final tag will be: $FULL_TAG"
      - name: Build Kolla images
        run: |
          echo "Building services: ${{ steps.vars.outputs.build_services }}"
          echo "Base: ${{ inputs.base_distro || 'ubuntu' }}"
          echo "OpenStack Release: ${{ inputs.openstack_release || '2024.2' }}"
          echo "Tag: ${{ steps.vars.outputs.full_tag }}"
          
          kolla-build \
            --base ${{ inputs.base_distro || 'ubuntu' }} \
            --namespace ${{ env.REGISTRY }}/${{ env.OWNER }} \
            --tag ${{ steps.vars.outputs.full_tag }} \
            --retries 3 \
            ${{ steps.vars.outputs.build_services }}

      - name: List built images
        if: success()
        run: |
          echo "Built images with tag: ${{ steps.vars.outputs.full_tag }}"
          docker images | grep "${{ env.REGISTRY }}/${{ env.OWNER }}" | grep ${{ steps.vars.outputs.full_tag }} || echo "No images found with expected tag"
          echo ""
          echo "All images:"
          docker images | grep "${{ env.REGISTRY }}/${{ env.OWNER }}" || echo "No images found"

      - name: Login to Container Registry
        if: success() && (github.event_name == 'push' || inputs.push_images == true)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Push images
        if: success() && (github.event_name == 'push' || inputs.push_images == true)
        run: |
          echo "Pushing images..."
          
          # 为镜像重新打标签，确保格式正确
          for image in $(docker images --format "{{.Repository}}:{{.Tag}}" | grep "${{ env.OWNER }}" | grep -v "<none>"); do
            if [[ "$image" == *"${{ env.REGISTRY }}/${{ env.OWNER }}"* ]]; then
              echo "Image already has correct registry prefix: $image"
              echo "Pushing: $image"
              docker push "$image"
            else
              # 重新打标签
              new_tag="${{ env.REGISTRY }}/$image"
              echo "Retagging $image -> $new_tag"
              docker tag "$image" "$new_tag"
              echo "Pushing: $new_tag"
              docker push "$new_tag"
            fi
          done