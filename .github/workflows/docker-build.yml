name: Build Images By Matrix

on:
  workflow_dispatch:
    inputs:
      build_scope:
        description: 'Which services to build'
        required: false
        default: 'core'
        type: choice
        options:
          - core
          - infra
          - all
          - custom
      custom_services:
        description: 'Custom services (comma-separated, only if scope=custom)'
        required: false
        default: ''
        type: string
      base_distro:
        description: 'Base distribution'
        required: false
        default: 'ubuntu'
        type: choice
        options:
          - ubuntu
          - rocky
          - debian
      openstack_release:
        description: 'OpenStack release version'
        required: false
        default: '2024.2'
        type: choice
        options:
          - '2024.2'
          - '2025.1'
          - 'master'
      push_images:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  ALL_SERVICES: |
    [
      "keystone", "glance", "nova", "neutron", "cinder", "placement", "heat", "horizon", 
      "aodh", "barbican", "blazar", "ceilometer", "cloudkitty", "cyborg", "designate", 
      "gnocchi", "ironic", "ironic-inspector", "magnum", "manila", "masakari", "mistral", 
      "octavia", "tacker", "trove", "venus", "watcher", "zun", "cron", "etcd", "fluentd",
      "haproxy", "hacluster", "keepalived", "kolla-toolbox", "letsencrypt", "mariadb", 
      "memcached", "opensearch", "openvswitch", "ovn", "ovsdpdk", "proxysql", "rabbitmq", 
      "redis", "tgtd", "collectd", "dnsmasq", "grafana", "influxdb", "iscsid", "multipathd",
      "networking-baremetal", "prometheus", "skyline", "telegraf", "bifrost", "kuryr"
    ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
      tag: ${{ steps.set-matrix.outputs.tag }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          case "${{ github.event.inputs.base_distro || 'ubuntu' }}" in
            ubuntu) DISTRO_TAG="ubuntu_noble" ;;
            rocky) DISTRO_TAG="rocky_9" ;;
            debian) DISTRO_TAG="debian_bookworm" ;;
            *) DISTRO_TAG="ubuntu_noble" ;;
          esac
          FULL_TAG="${{ github.event.inputs.openstack_release || '2024.2' }}-${DISTRO_TAG}"
          echo "tag=$FULL_TAG" >> $GITHUB_OUTPUT

          ALL_SERVICES='${{ env.ALL_SERVICES }}'
          SCOPE="${{ github.event.inputs.build_scope || 'core' }}"
          case "$SCOPE" in
            core)
              SERVICES=$(echo "$ALL_SERVICES" | jq '.[0:29]')
              ;;
            infra)
              SERVICES=$(echo "$ALL_SERVICES" | jq '.[29:]')
              ;;
            all)
              SERVICES=$ALL_SERVICES
              ;;
            custom)
              if [ -n "${{ github.event.inputs.custom_services }}" ]; then
                CUSTOM=$(echo "${{ github.event.inputs.custom_services }}" | awk -F, '{for(i=1;i<=NF;i++) {gsub(/^ +| +$/,"",$i); print "\""$i"\""}' | paste -sd, - | sed 's/^/[/;s/$/]/')
                SERVICES=$CUSTOM
              else
                SERVICES=$(echo "$ALL_SERVICES" | jq '.[0:29]')
              fi
              ;;
            *)
              SERVICES=$(echo "$ALL_SERVICES" | jq '.[0:29]')
              ;;
          esac
          echo "services=$SERVICES" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to Container Registry
        if: ${{ github.event.inputs.push_images == 'true' || github.event_name == 'push' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Install Kolla
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-dev build-essential libffi-dev
          python3 -m pip install --upgrade pip
          python3 -m pip install kolla docker
      - name: Build image
        run: |
          echo "Building: ${{ matrix.service }}"
          kolla-build \
            --base ${{ github.event.inputs.base_distro || 'ubuntu' }} \
            --namespace ${{ env.REGISTRY }}/${{ env.OWNER }} \
            --tag ${{ needs.prepare.outputs.tag }} \
            --retries 3 \
            --pull \
            ${{ matrix.service }}
      - name: Test image
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.service }}:${{ needs.prepare.outputs.tag }}"
          if docker images | grep -q "${{ matrix.service }}"; then
            echo "‚úÖ Image ${{ matrix.service }} built successfully"
          else
            echo "‚ùå Image ${{ matrix.service }} not found" && exit 1
          fi
      - name: Push image
        if: ${{ github.event.inputs.push_images == 'true' || github.event_name == 'push' }}
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.service }}:${{ needs.prepare.outputs.tag }}"
          docker push "$IMAGE_NAME"
          echo "‚úÖ ${{ matrix.service }} pushed successfully"

  summary:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "=== Build Summary ==="
          echo "OpenStack Release: ${{ github.event.inputs.openstack_release || '2024.2' }}"
          echo "Base Distribution: ${{ github.event.inputs.base_distro || 'ubuntu' }}"
          echo "Tag Format: ${{ needs.prepare.outputs.tag }}"
          echo "Build Scope: ${{ github.event.inputs.build_scope || 'core' }}"
          echo "Push Images: ${{ github.event.inputs.push_images || true }}"
          echo ""
          echo "Services built:"
          echo '${{ needs.prepare.outputs.services }}' | jq -r '.[]' | sed 's/^/  - /'
          echo ""
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "üéâ All builds completed successfully!"
          else
            echo "‚ö†Ô∏è Some builds may have failed. Check individual job logs."
          fi
