name: Build Nexus Images

on:
  push:
    branches: [ main, master ]
    paths:
      - 'docker/nexus/**'
      - '.github/workflows/nexus-build.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'docker/nexus/**'
      - '.github/workflows/nexus-build.yml'
  workflow_dispatch:
    inputs:
      kubectl_version:
        description: 'kubectl version to install'
        required: false
        default: 'v1.28.0'
      push_images:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  OWNER: fivetime

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        base_distro: [ubuntu]
        base_tag: [jammy]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Kolla and dependencies
        run: |
          echo "=== Installing Kolla and dependencies ==="
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install kolla docker
          
          # 验证安装
          kolla-build --version
          which kolla-build

      - name: Setup working directory
        run: |
          echo "=== Setting up working directory ==="
          pwd
          ls -la
          
          # 检查 docker 目录是否存在
          if [ ! -d "docker" ]; then
            echo "Error: docker directory not found!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          echo "=== Docker directory structure ==="
          find docker -type f -name "*.j2" | head -20

      - name: Setup Kolla configuration
        run: |
          echo "=== Setting up Kolla configuration ==="
          sudo mkdir -p /etc/kolla
          
          # 生成 kolla-build.conf
          cat > /tmp/kolla-build.conf << 'EOF'
          [DEFAULT]
          debug = true
          log_dir = /var/log/kolla
          push = false
          base = ${{ matrix.base_distro }}
          base_tag = ${{ matrix.base_tag }}
          namespace = ${{ env.REGISTRY }}/${{ env.OWNER }}
          tag = latest
          
          # Nexus 项目配置
          [nexus-user]
          uid = 42424
          gid = 42424
          
          # kubectl 版本配置
          [nexus]
          kubectl_version = ${{ inputs.kubectl_version || 'v1.28.0' }}
          EOF
          
          sudo cp /tmp/kolla-build.conf /etc/kolla/kolla-build.conf
          
          echo "=== Kolla configuration ==="
          sudo cat /etc/kolla/kolla-build.conf

      - name: Verify Kolla setup
        run: |
          echo "=== Verifying Kolla setup ==="
          kolla-build --list-images | head -20
          
          echo "=== Checking nexus templates ==="
          if [ -d "docker/nexus" ]; then
            echo "Nexus templates found:"
            find docker/nexus -name "*.j2"
          else
            echo "Error: docker/nexus directory not found!"
            exit 1
          fi

      - name: Build base images first
        run: |
          echo "=== Building base images ==="
          
          # 构建依赖的基础镜像
          kolla-build \
            --config-file /etc/kolla/kolla-build.conf \
            --debug \
            base openstack-base || {
            echo "Failed to build base images, continuing anyway..."
          }

      - name: Build Nexus images
        run: |
          echo "=== Building Nexus images ==="
          echo "Base: ${{ matrix.base_distro }}:${{ matrix.base_tag }}"
          echo "Registry: ${{ env.REGISTRY }}/${{ env.OWNER }}"
          echo "Working directory: $(pwd)"
          
          # 构建 nexus 项目（会自动构建 base, proxy, dns）
          echo "=== Starting nexus build ==="
          kolla-build \
            --config-file /etc/kolla/kolla-build.conf \
            --debug \
            --retries 3 \
            nexus

      - name: Check built images
        run: |
          echo "=== Built Images ==="
          docker images | grep nexus || echo "No nexus images found"
          
          echo "=== All Images ==="
          docker images | grep "${{ env.REGISTRY }}/${{ env.OWNER }}" || echo "No images with registry prefix found"
          
          echo "=== All Docker Images ==="
          docker images

      - name: Test built images
        if: success()
        run: |
          echo "=== Testing Nexus images ==="
          
          # 查找实际的镜像名称
          NEXUS_BASE_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep nexus | grep -v proxy | grep -v dns | head -1)
          NEXUS_PROXY_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep nexus-proxy | head -1)
          NEXUS_DNS_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep nexus-dns | head -1)
          
          echo "Found images:"
          echo "Base: $NEXUS_BASE_IMAGE"
          echo "Proxy: $NEXUS_PROXY_IMAGE"
          echo "DNS: $NEXUS_DNS_IMAGE"
          
          # 测试基础镜像
          if [ -n "$NEXUS_BASE_IMAGE" ]; then
            echo "Testing nexus base image..."
            docker run --rm $NEXUS_BASE_IMAGE kubectl version --client || echo "kubectl test failed"
            docker run --rm $NEXUS_BASE_IMAGE jq --version || echo "jq test failed"
            docker run --rm $NEXUS_BASE_IMAGE openstack --version || echo "openstack test failed"
          fi
          
          # 测试 proxy 镜像
          if [ -n "$NEXUS_PROXY_IMAGE" ]; then
            echo "Testing nexus-proxy image..."
            docker run --rm $NEXUS_PROXY_IMAGE nginx -v || echo "nginx test failed"
            docker run --rm $NEXUS_PROXY_IMAGE kubectl version --client || echo "kubectl test failed"
          fi
          
          # 测试 DNS 镜像
          if [ -n "$NEXUS_DNS_IMAGE" ]; then
            echo "Testing nexus-dns image..."
            docker run --rm $NEXUS_DNS_IMAGE dnsmasq --version || echo "dnsmasq test failed"
            docker run --rm $NEXUS_DNS_IMAGE kubectl version --client || echo "kubectl test failed"
          fi

      - name: Login to Container Registry
        if: success() && (github.event_name == 'push' || inputs.push_images == true)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push images
        if: success() && (github.event_name == 'push' || inputs.push_images == true)
        run: |
          echo "=== Pushing Nexus images ==="
          
          # 推送所有 nexus 相关镜像
          for image in $(docker images --format "{{.Repository}}:{{.Tag}}" | grep "${{ env.REGISTRY }}/${{ env.OWNER }}/nexus"); do
            if [[ "$image" != *"<none>"* ]]; then
              echo "Pushing $image"
              docker push "$image" || {
                echo "Failed to push $image"
                continue
              }
            fi
          done
          
          echo "=== Push completed ==="

      - name: Generate build summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Status | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|------|" >> $GITHUB_STEP_SUMMARY
          
          for image in $(docker images --format "{{.Repository}}:{{.Tag}}" | grep nexus | head -10); do
            if [[ "$image" != *"<none>"* ]]; then
              size=$(docker images --format "{{.Size}}" "$image")
              echo "| $image | ✅ Built | $size |" >> $GITHUB_STEP_SUMMARY
            fi
          done || echo "| No images | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY