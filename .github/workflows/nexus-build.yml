name: 构建 Nexus 容器镜像

on:
  push:
    branches: [ main, master ]
    paths:
      - 'docker/nexus/**'
      - '.github/workflows/build-nexus.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'docker/nexus/**'
      - '.github/workflows/build-nexus.yml'
  workflow_dispatch:
    inputs:
      kubectl_version:
        description: 'kubectl 版本'
        required: false
        default: 'v1.28.0'
        type: string
      force_rebuild:
        description: '强制重新构建所有镜像'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  OWNER: fivetime

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        base_distro: [ubuntu]
        base_tag: [jammy]
        service: [nexus]
      fail-fast: false

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 安装 Kolla 和依赖项
        run: |
          echo "=== 安装 Kolla 和依赖项 ==="
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install kolla docker
          
          # 验证安装
          kolla-build --version
          which kolla-build

      - name: 设置工作目录
        run: |
          echo "=== 设置工作目录 ==="
          pwd
          ls -la
          
          # 检查 docker 目录是否存在
          if [ ! -d "docker" ]; then
            echo "错误：docker 目录不存在！"
            echo "当前目录内容："
            ls -la
            exit 1
          fi
          
          echo "=== Docker 目录结构 ==="
          find docker -type f -name "*.j2" | head -20

      - name: 设置 Kolla 配置
        run: |
          echo "=== 设置 Kolla 配置 ==="
          sudo mkdir -p /etc/kolla
          
          # 生成 kolla-build.conf
          cat << EOF | sudo tee /etc/kolla/kolla-build.conf
          [DEFAULT]
          namespace = ${{ env.REGISTRY }}/${{ env.OWNER }}
          push = true
          tag = latest
          base = ${{ matrix.base_distro }}
          base_tag = ${{ matrix.base_tag }}
          registry = ${{ env.REGISTRY }}
          skip_existing = false
          pull = true
          squash = false
          
          [nexus-user]
          uid = 42424
          gid = 42424
          EOF
          
          echo "=== Kolla 配置 ==="
          sudo cat /etc/kolla/kolla-build.conf

      - name: 列出可用的 Nexus 镜像
        run: |
          echo "=== 可用的 Nexus 模板 ==="
          kolla-build --list-images | grep -E "nexus" || echo "检查 nexus 模板结构..."
          
          echo "=== 模板目录结构 ==="
          find docker/nexus -type d | head -10
          
          echo "=== 模板文件 ==="
          find docker/nexus -name "Dockerfile.j2" | head -10

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到容器注册表
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建 Nexus 镜像
        run: |
          echo "=== 构建 Nexus 镜像 ==="
          echo "服务: ${{ matrix.service }}"
          echo "基础: ${{ matrix.base_distro }}:${{ matrix.base_tag }}"
          echo "注册表: ${{ env.REGISTRY }}/${{ env.OWNER }}"
          echo "工作目录: $(pwd)"
          
          # 确保 kolla-build 可用
          echo "=== 验证 kolla-build ==="
          which kolla-build
          kolla-build --version
          
          # 检查可用的镜像模板
          echo "=== 可用模板 ==="
          kolla-build --list-images | grep -E "(base|nexus)" || echo "尚未找到 nexus 模板"
          
          # 构建 nexus 相关的所有镜像（包括 proxy 和 dns 子镜像）
          echo "=== 开始构建 ==="
          kolla-build \
            --config-file /etc/kolla/kolla-build.conf \
            --debug \
            ${{ matrix.service }}

      - name: 测试构建的镜像
        if: success()
        run: |
          echo "=== 测试 Nexus 镜像 ==="
          
          # 检查构建的镜像
          echo "=== 可用镜像 ==="
          docker images | grep -E "(nexus|${{ env.OWNER }})" || echo "未找到 nexus 镜像"
          
          # 获取实际的镜像标签
          REGISTRY_PREFIX="${{ env.REGISTRY }}/${{ env.OWNER }}"
          
          # 测试 nexus 基础镜像
          BASE_IMAGE="${REGISTRY_PREFIX}/nexus:latest"
          if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "nexus:latest"; then
            echo "测试 nexus 基础镜像..."
            docker run --rm $BASE_IMAGE kubectl version --client || echo "kubectl 测试失败"
            docker run --rm $BASE_IMAGE jq --version || echo "jq 测试失败"
            docker run --rm $BASE_IMAGE openstack --version || echo "openstack 测试失败"
          fi
          
          # 测试 nexus-proxy 镜像
          PROXY_IMAGE="${REGISTRY_PREFIX}/nexus-proxy:latest"
          if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "nexus-proxy:latest"; then
            echo "测试 nexus-proxy 镜像..."
            docker run --rm $PROXY_IMAGE nginx -v || echo "nginx 测试失败"
            docker run --rm $PROXY_IMAGE kubectl version --client || echo "kubectl 测试失败"
          fi
          
          # 测试 nexus-dns 镜像
          DNS_IMAGE="${REGISTRY_PREFIX}/nexus-dns:latest"  
          if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "nexus-dns:latest"; then
            echo "测试 nexus-dns 镜像..."
            docker run --rm $DNS_IMAGE dnsmasq --version || echo "dnsmasq 测试失败"
            docker run --rm $DNS_IMAGE kubectl version --client || echo "kubectl 测试失败"
          fi

      - name: 生成镜像元数据
        if: success()
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus
            ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-proxy
            ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-dns
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}

      - name: 推送镜像到注册表
        if: success() && github.event_name != 'pull_request'
        run: |
          echo "=== 推送镜像到注册表 ==="
          
          # 推送所有构建的镜像
          REGISTRY_PREFIX="${{ env.REGISTRY }}/${{ env.OWNER }}"
          
          # 推送 nexus 基础镜像
          if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "nexus:latest"; then
            echo "推送 nexus 基础镜像..."
            docker push $REGISTRY_PREFIX/nexus:latest
          fi
          
          # 推送 nexus-proxy 镜像
          if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "nexus-proxy:latest"; then
            echo "推送 nexus-proxy 镜像..."
            docker push $REGISTRY_PREFIX/nexus-proxy:latest
          fi
          
          # 推送 nexus-dns 镜像
          if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "nexus-dns:latest"; then
            echo "推送 nexus-dns 镜像..."
            docker push $REGISTRY_PREFIX/nexus-dns:latest
          fi

      - name: 构建摘要
        if: always()
        run: |
          echo "=== 构建摘要 ==="
          echo "✅ 服务: ${{ matrix.service }}"
          echo "✅ 基础镜像: ${{ matrix.base_distro }}:${{ matrix.base_tag }}"
          echo "✅ 注册表: ${{ env.REGISTRY }}/${{ env.OWNER }}"
          echo "✅ 推送: ${{ github.event_name != 'pull_request' }}"
          
          echo "=== 最终镜像列表 ==="
          docker images | grep -E "(nexus|${{ env.OWNER }})" || echo "未找到 nexus 镜像"