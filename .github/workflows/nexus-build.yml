name: Build Nexus Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker/nexus/**'
      - '.github/workflows/nexus-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/nexus/**'
      - '.github/workflows/nexus-build.yml'
  workflow_dispatch:
    inputs:
      kubectl_version:
        description: 'kubectl version to install'
        required: false
        default: 'v1.28.0'
        type: string
      push_images:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean
      base_distro:
        description: 'Base distribution'
        required: false
        default: 'ubuntu'
        type: choice
        options:
          - ubuntu
          - debian
          - centos

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        base_distro:
          - ubuntu
        base_tag:
          - jammy
        service:
          - nexus

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Kolla and dependencies
        run: |
          echo "=== Installing Kolla and dependencies ==="
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install kolla docker
          
          # 验证安装
          kolla-build --version
          which kolla-build

      - name: Setup working directory
        run: |
          echo "=== Setting up working directory ==="
          # 确保我们在正确的目录中
          pwd
          ls -la
          
          # 检查 docker 目录是否存在
          if [ ! -d "docker" ]; then
            echo "Error: docker directory not found!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          echo "=== Docker directory structure ==="
          find docker -type f -name "*.j2" | head -20

      - name: Setup Kolla configuration
        run: |
          echo "=== Setting up Kolla configuration ==="
          sudo mkdir -p /etc/kolla
          
          # 生成 kolla-build.conf
          cat > /tmp/kolla-build.conf << 'EOF'
          [DEFAULT]
          debug = True
          logs_dir = /tmp/kolla-logs
          push = false
          base = ${{ matrix.base_distro }}
          base_tag = ${{ matrix.base_tag }}
          namespace = ${{ env.REGISTRY }}/${{ env.OWNER }}
          
          # Nexus 项目配置
          [nexus-user]
          uid = 42424
          gid = 42424
          
          # kubectl 版本配置
          [DEFAULT]
          kubectl_version = ${{ inputs.kubectl_version || 'v1.28.0' }}
          EOF
          
          sudo cp /tmp/kolla-build.conf /etc/kolla/kolla-build.conf
          
          echo "=== Kolla configuration ==="
          sudo cat /etc/kolla/kolla-build.conf

      - name: List available Nexus images
        run: |
          echo "=== Available Nexus Templates ==="
          kolla-build --list-images | grep -E "nexus" || echo "Checking nexus template structure..."
          
          echo "=== Template Directory Structure ==="
          find docker/nexus -type d | head -10
          
          echo "=== Template Files ==="
          find docker/nexus -name "Dockerfile.j2" | head -10

      - name: Build Nexus images
        run: |
          echo "=== Building Nexus images ==="
          echo "Service: ${{ matrix.service }}"
          echo "Base: ${{ matrix.base_distro }}:${{ matrix.base_tag }}"
          echo "Registry: ${{ env.REGISTRY }}/${{ env.OWNER }}"
          echo "Working directory: $(pwd)"
          
          # 确保 kolla-build 可用
          echo "=== Verifying kolla-build ==="
          which kolla-build
          kolla-build --version
          
          # 检查可用的镜像模板
          echo "=== Available templates ==="
          kolla-build --list-images | grep -E "(base|nexus)" || echo "No nexus templates found yet"
          
          # 构建 nexus 相关的所有镜像（包括 proxy 和 dns 子镜像）
          echo "=== Starting build ==="
          kolla-build \
            --config-file /etc/kolla/kolla-build.conf \
            --debug \
            ${{ matrix.service }}

      - name: List built images
        if: success()
        run: |
          echo "=== Built images ==="
          docker images | grep nexus || echo "No nexus images found"
          
          echo "=== All images ==="
          docker images | head -20

      - name: Test built images
        if: success()
        run: |
          echo "=== Testing Nexus images ==="
          
          # 检查构建的镜像
          docker images | grep nexus || echo "Images not found in local registry"
          
          # 测试 nexus 基础镜像
          BASE_IMAGE="${{ env.REGISTRY }}/${{ env.OWNER }}/nexus:latest"
          if docker images | grep -q "nexus.*latest"; then
            echo "Testing nexus base image tools..."
            docker run --rm $BASE_IMAGE kubectl version --client || echo "kubectl test failed"
            docker run --rm $BASE_IMAGE jq --version || echo "jq test failed"
            docker run --rm $BASE_IMAGE openstack --version || echo "openstack test failed"
          fi
          
          # 测试 nexus-proxy 镜像
          PROXY_IMAGE="${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-proxy:latest"
          if docker images | grep -q nexus-proxy; then
            echo "Testing nexus-proxy tools..."
            docker run --rm $PROXY_IMAGE kubectl version --client || echo "kubectl test failed"
            docker run --rm $PROXY_IMAGE jq --version || echo "jq test failed"
            docker run --rm $PROXY_IMAGE nginx -v || echo "nginx test failed"
            docker run --rm $PROXY_IMAGE openstack --version || echo "openstack test failed"
          fi
          
          # 测试 nexus-dns 镜像
          DNS_IMAGE="${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-dns:latest"  
          if docker images | grep -q nexus-dns; then
            echo "Testing nexus-dns tools..."
            docker run --rm $DNS_IMAGE kubectl version --client || echo "kubectl test failed"
            docker run --rm $DNS_IMAGE jq --version || echo "jq test failed"
            docker run --rm $DNS_IMAGE dnsmasq --version || echo "dnsmasq test failed"
            docker run --rm $DNS_IMAGE dig -v || echo "dig test failed"
          fi

      - name: Log in to Container Registry
        if: success() && (github.event_name == 'push' || inputs.push_images == true)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate images metadata
        if: success()
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus
            ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-proxy
            ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-dns
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}

      - name: Push images to registry
        if: success() && (github.event_name == 'push' || inputs.push_images == true)
        run: |
          echo "=== Pushing images to registry ==="
          
          # 推送所有构建的 nexus 镜像
          for image in nexus nexus-proxy nexus-dns; do
            local_image="${{ env.REGISTRY }}/${{ env.OWNER }}/${image}:latest"
            if docker images | grep -q "$image.*latest"; then
              echo "Pushing $local_image"
              docker push $local_image || echo "Failed to push $local_image"
          
              # 如果不是默认分支，也推送带分支名的标签
              if [ "${{ github.ref }}" != "refs/heads/main" ]; then
                branch_tag="${{ env.REGISTRY }}/${{ env.OWNER }}/${image}:${{ github.ref_name }}"
                docker tag $local_image $branch_tag
                docker push $branch_tag || echo "Failed to push $branch_tag"
              fi
            else
              echo "Image $image not found locally"
            fi
          done

      - name: Generate build summary
        if: always()
        run: |
          echo "=== Build Summary ==="
          echo "**Nexus Images Build Report**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Status | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|------|" >> $GITHUB_STEP_SUMMARY
          
          for image in nexus nexus-proxy nexus-dns; do
            if docker images | grep -q "$image.*latest"; then
              size=$(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep "$image:latest" | awk '{print $2}' || echo "Unknown")
              echo "| ${{ env.REGISTRY }}/${{ env.OWNER }}/$image | ✅ Built | $size |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| ${{ env.REGISTRY }}/${{ env.OWNER }}/$image | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Base: ${{ matrix.base_distro }}:${{ matrix.base_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- kubectl: ${{ inputs.kubectl_version || 'v1.28.0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Push: ${{ inputs.push_images || 'auto' }}" >> $GITHUB_STEP_SUMMARY

      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: kolla-build-logs-${{ matrix.base_distro }}-${{ github.run_number }}
          path: /tmp/kolla-logs/
          retention-days: 7