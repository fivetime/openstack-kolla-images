name: Build Nexus Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker/nexus/**'
      - '.github/workflows/nexus-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/nexus/**'
  workflow_dispatch:
    inputs:
      kubectl_version:
        description: 'kubectl version to install'
        required: false
        default: 'v1.33.0'
      push_images:
        description: 'Push images to registry'
        type: boolean
        required: false
        default: true

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        base_distro: [ubuntu]
        base_tag: [jammy]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Kolla and dependencies
        run: |
          echo "=== Installing Kolla and dependencies ==="
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install kolla docker
          
          # 验证安装
          kolla-build --version
          which kolla-build

      - name: Setup working directory
        run: |
          echo "=== Setting up working directory ==="
          pwd
          ls -la
          
          # 检查 docker 目录是否存在
          if [ ! -d "docker" ]; then
            echo "Error: docker directory not found!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          echo "=== Docker directory structure ==="
          find docker -type f -name "*.j2" | head -20

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Kolla configuration
        run: |
          echo "=== Setting up Kolla configuration ==="
          sudo mkdir -p /etc/kolla
          
          # 生成 kolla-build.conf
          cat > /tmp/kolla-build.conf << 'EOF'
          [DEFAULT]
          debug = true
          logs_dir = /tmp/kolla-logs
          work_dir = /tmp/kolla-work
          base = ${{ matrix.base_distro }}
          base_tag = ${{ matrix.base_tag }}
          namespace = ${{ env.REGISTRY }}/${{ env.OWNER }}
          push = true
          tag = latest
          
          # Nexus 项目配置
          [nexus-user]
          uid = 42424
          gid = 42424
          
          # kubectl 版本配置
          [nexus]
          kubectl_version = ${{ inputs.kubectl_version || 'v1.33.0' }}
          EOF
          
          sudo cp /tmp/kolla-build.conf /etc/kolla/kolla-build.conf
          
          echo "=== Kolla configuration ==="
          sudo cat /etc/kolla/kolla-build.conf

      - name: List available Nexus images
        run: |
          echo "=== Available Nexus Templates ==="
          kolla-build --list-images | grep -E "(base|nexus)" || echo "Checking nexus template structure..."
          
          echo "=== Template Directory Structure ==="
          find docker -name "*nexus*" -type d | head -10
          
          echo "=== Template Files ==="
          find docker -name "Dockerfile.j2" -path "*nexus*" | head -10

      - name: Build Nexus images
        run: |
          echo "=== Building Nexus images ==="
          echo "Base: ${{ matrix.base_distro }}:${{ matrix.base_tag }}"
          echo "Registry: ${{ env.REGISTRY }}/${{ env.OWNER }}"
          echo "Working directory: $(pwd)"
          
          # 确保 kolla-build 可用
          echo "=== Verifying kolla-build ==="
          which kolla-build
          kolla-build --version
          
          # 检查可用的镜像模板
          echo "=== Available templates ==="
          kolla-build --list-images | grep -E "(base|nexus)" || echo "No nexus templates found yet"
          
          # 构建 nexus 相关的所有镜像（包括 proxy 和 dns 子镜像）
          echo "=== Starting build ==="
          kolla-build \
            --config-file /etc/kolla/kolla-build.conf \
            --debug \
            nexus

      - name: List built images
        if: success()
        run: |
          echo "=== Built Images ==="
          docker images | grep nexus
          
          echo "=== All Images ==="
          docker images | grep "${{ env.REGISTRY }}/${{ env.OWNER }}"

      - name: Test built images
        if: success()
        run: |
          echo "=== Testing Nexus images ==="
          
          # 获取构建的镜像列表
          NEXUS_BASE="${{ env.REGISTRY }}/${{ env.OWNER }}/nexus:latest"
          NEXUS_PROXY="${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-proxy:latest"
          NEXUS_DNS="${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-dns:latest"
          
          # 测试基础镜像
          if docker images | grep -q "nexus.*latest"; then
            echo "Testing nexus base image..."
            docker run --rm $NEXUS_BASE kubectl version --client || echo "kubectl test failed"
            docker run --rm $NEXUS_BASE jq --version || echo "jq test failed"
            docker run --rm $NEXUS_BASE openstack --version || echo "openstack test failed"
          fi
          
          # 测试 nexus-proxy 镜像
          if docker images | grep -q "nexus-proxy.*latest"; then
            echo "Testing nexus-proxy image..."
            docker run --rm $NEXUS_PROXY nginx -v || echo "nginx test failed"
            docker run --rm $NEXUS_PROXY kubectl version --client || echo "kubectl test failed (inherited)"
          fi
          
          # 测试 nexus-dns 镜像
          if docker images | grep -q "nexus-dns.*latest"; then
            echo "Testing nexus-dns image..."
            docker run --rm $NEXUS_DNS dnsmasq --version || echo "dnsmasq test failed"
            docker run --rm $NEXUS_DNS kubectl version --client || echo "kubectl test failed (inherited)"
          fi

      - name: Generate images metadata
        if: success()
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus
            ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-proxy
            ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-dns
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}

      - name: Push images to registry
        if: success() && (github.event_name == 'push' || inputs.push_images)
        run: |
          echo "=== Pushing images to ${{ env.REGISTRY }} ==="
          
          # 确保所有镜像都被推送
          docker images | grep "${{ env.REGISTRY }}/${{ env.OWNER }}/nexus" | while read image tag rest; do
            echo "Pushing $image:$tag"
            docker push "$image:$tag" || echo "Failed to push $image:$tag"
          done
          
          echo "=== Push completed ==="

      - name: Summary
        if: always()
        run: |
          echo "=== Build Summary ==="
          echo "Base Image: ${{ matrix.base_distro }}:${{ matrix.base_tag }}"
          echo "Registry: ${{ env.REGISTRY }}/${{ env.OWNER }}"
          echo "Built Images:"
          docker images | grep "${{ env.REGISTRY }}/${{ env.OWNER }}/nexus" || echo "No images found"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Build completed successfully!"
            echo "Images should be available at:"
            echo "- ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus:latest"
            echo "- ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-proxy:latest" 
            echo "- ${{ env.REGISTRY }}/${{ env.OWNER }}/nexus-dns:latest"
          else
            echo "❌ Build failed!"
          fi