name: Build Images By Matrix

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build (leave empty for all)'
        required: false
        type: string
      base_distro:
        description: 'Base distribution'
        required: true
        type: choice
        options:
          - ubuntu
          - debian
          - rocky
          - centos
        default: ubuntu
      base_arch:
        description: 'Target architecture'
        required: false
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - aarch64
      release:
        description: 'OpenStack release'
        required: true
        type: choice
        options:
          - '2024.2'
          - '2025.1'
          - '2025.2'
          - master
        default: '2025.2'
      push_images:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean
      registry_type:
        description: 'Registry type'
        required: false
        default: 'ghcr'
        type: choice
        options:
          - ghcr
          - harbor
      harbor_url:
        description: 'Harbor registry URL (e.g., harbor.example.com)'
        required: false
        default: 'harbor.example.com'
        type: string
      harbor_project:
        description: 'Harbor project name'
        required: false
        default: 'openstack'
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      registry: ${{ steps.set-registry.outputs.registry }}
      namespace: ${{ steps.set-registry.outputs.namespace }}
    steps:
      - id: set-matrix
        run: |
          if [ -n "${{ github.event.inputs.service }}" ]; then
            echo "matrix=[\"${{ github.event.inputs.service }}\"]" >> $GITHUB_OUTPUT
          else
            # 分类定义服务
            CORE_SERVICES='base openstack-base keystone glance nova neutron cinder placement horizon heat'
          
            OPENSTACK_SERVICES='aodh barbican blazar ceilometer cloudkitty cyborg designate gnocchi kuryr magnum manila masakari mistral octavia skyline-apiserver skyline-console tacker trove venus watcher zun'
          
            BAREMETAL_SERVICES='bifrost ironic ironic-inspector networking-baremetal'
          
            INFRA_SERVICES='kolla-toolbox mariadb rabbitmq memcached haproxy keepalived etcd fluentd opensearch openvswitch ovn redis proxysql cron collectd dnsmasq grafana influxdb iscsid multipathd prometheus telegraf'
          
            # 合并所有服务
            ALL_SERVICES="$CORE_SERVICES $OPENSTACK_SERVICES $BAREMETAL_SERVICES $INFRA_SERVICES"
          
            # 转换为 JSON 数组格式
            JSON_ARRAY=$(echo $ALL_SERVICES | tr ' ' '\n' | jq -R . | jq -s -c .)
          
            echo "matrix=$JSON_ARRAY" >> $GITHUB_OUTPUT
            echo "Building services: Core + OpenStack + Baremetal + Infrastructure"
          fi

      - id: set-registry
        run: |
          REGISTRY_TYPE="${{ inputs.registry_type || 'ghcr' }}"
          
          if [ "$REGISTRY_TYPE" = "harbor" ]; then
            HARBOR_URL="${{ inputs.harbor_url }}"
            HARBOR_PROJECT="${{ inputs.harbor_project || 'openstack' }}"
          
            if [ -z "$HARBOR_URL" ]; then
              echo "Error: harbor_url is required when registry_type is harbor"
              exit 1
            fi
          
            echo "registry=$HARBOR_URL" >> $GITHUB_OUTPUT
            echo "namespace=$HARBOR_PROJECT" >> $GITHUB_OUTPUT
            echo "Using Harbor: $HARBOR_URL/$HARBOR_PROJECT"
          else
            echo "registry=ghcr.io" >> $GITHUB_OUTPUT
            echo "namespace=${{ github.repository_owner }}" >> $GITHUB_OUTPUT
            echo "Using GHCR: ghcr.io/${{ github.repository_owner }}"
          fi

  build:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: inputs.base_arch == 'aarch64'
        uses: docker/setup-buildx-action@v3

      - name: Install Kolla
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install kolla docker

      - name: Determine image tag and platform
        id: tag
        run: |
          RELEASE="${{ inputs.release || '2025.2' }}"
          BASE_DISTRO="${{ inputs.base_distro || 'ubuntu' }}"
          BASE_ARCH="${{ inputs.base_arch || 'x86_64' }}"
          
          # 计算分支名称
          if [ "$RELEASE" = "master" ]; then
            BRANCH="master"
          else
            BRANCH="stable/${RELEASE}"
          fi
          
          # 根据发行版设置标签
          case "$BASE_DISTRO" in
            ubuntu)
              OS_TAG="ubuntu_noble"
              BASE_IMAGE="ubuntu:24.04"
              ;;
            debian)
              OS_TAG="debian_bookworm"
              BASE_IMAGE="debian:bookworm"
              ;;
            rocky)
              OS_TAG="rocky_9"
              BASE_IMAGE="quay.io/rockylinux/rockylinux:9"
              ;;
            centos)
              OS_TAG="centos_stream9"
              BASE_IMAGE="quay.io/centos/centos:stream9"
              ;;
            *)
              OS_TAG="ubuntu_noble"
              BASE_IMAGE="ubuntu:24.04"
              ;;
          esac
          
          # 架构处理
          case "$BASE_ARCH" in
            x86_64)
              ARCH_SUFFIX=""
              DEBIAN_ARCH="amd64"
              PLATFORM="linux/amd64"
              ;;
            aarch64)
              ARCH_SUFFIX="-aarch64"
              DEBIAN_ARCH="arm64"
              PLATFORM="linux/arm64"
              ;;
            *)
              ARCH_SUFFIX=""
              DEBIAN_ARCH="amd64"
              PLATFORM="linux/amd64"
              ;;
          esac
          
          # 构建完整标签
          if [ "$BASE_ARCH" = "x86_64" ]; then
            FULL_TAG="${RELEASE}-${OS_TAG}"
          else
            FULL_TAG="${RELEASE}-${OS_TAG}${ARCH_SUFFIX}"
          fi
          
          echo "tag=$FULL_TAG" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "base_arch=$BASE_ARCH" >> $GITHUB_OUTPUT
          echo "debian_arch=$DEBIAN_ARCH" >> $GITHUB_OUTPUT
          
          echo "Release: $RELEASE"
          echo "Branch: $BRANCH"
          echo "Tag: $FULL_TAG"
          echo "Platform: $PLATFORM"

      - name: Create kolla-build.conf
        run: |
          sudo mkdir -p /etc/kolla
          BRANCH="${{ steps.tag.outputs.branch }}"
          REGISTRY="${{ needs.prepare.outputs.registry }}"
          NAMESPACE="${{ needs.prepare.outputs.namespace }}"
          
          cat << EOF | sudo tee /etc/kolla/kolla-build.conf
          [DEFAULT]
          namespace = $NAMESPACE
          push = ${{ inputs.push_images }}
          tag = ${{ steps.tag.outputs.tag }}
          base = ${{ inputs.base_distro || 'ubuntu' }}
          registry = $REGISTRY
          skip_existing = true
          pull = true
          threads = 4
          retries = 3
          
          # 自动计算的分支变量:
          # Release: ${{ inputs.release }}
          # Branch:  $BRANCH
          # Tag:     ${{ steps.tag.outputs.tag }}
          
          # 核心服务源码配置 (可修改为自定义仓库)
          [openstack-base]
          type = git
          location = https://opendev.org/openstack/requirements
          reference = $BRANCH
          
          [keystone-base]
          type = git
          location = https://opendev.org/openstack/keystone
          reference = $BRANCH
          
          [glance-base]
          type = git
          location = https://opendev.org/openstack/glance
          reference = $BRANCH
          
          [nova-base]
          type = git
          location = https://opendev.org/openstack/nova
          reference = $BRANCH
          
          [neutron-base]
          type = git
          location = https://opendev.org/openstack/neutron
          reference = $BRANCH
          
          [cinder-base]
          type = git
          location = https://opendev.org/openstack/cinder
          reference = $BRANCH
          
          [placement-base]
          type = git
          location = https://opendev.org/openstack/placement
          reference = $BRANCH
          
          [horizon]
          type = git
          location = https://opendev.org/openstack/horizon
          reference = $BRANCH
          
          [heat-base]
          type = git
          location = https://opendev.org/openstack/heat
          reference = $BRANCH
          
          # 其他 OpenStack 服务
          [aodh-base]
          type = git
          location = https://opendev.org/openstack/aodh
          reference = $BRANCH
          
          [barbican-base]
          type = git
          location = https://opendev.org/openstack/barbican
          reference = $BRANCH
          
          [bifrost-base]
          type = git
          location = https://opendev.org/openstack/bifrost
          reference = $BRANCH
          
          [blazar-base]
          type = git
          location = https://opendev.org/openstack/blazar
          reference = $BRANCH
          
          [ceilometer-base]
          type = git
          location = https://opendev.org/openstack/ceilometer
          reference = $BRANCH
          
          [cloudkitty-base]
          type = git
          location = https://opendev.org/openstack/cloudkitty
          reference = $BRANCH
          
          [cyborg-base]
          type = git
          location = https://opendev.org/openstack/cyborg
          reference = $BRANCH
          
          [designate-base]
          type = git
          location = https://opendev.org/openstack/designate
          reference = $BRANCH
          
          [gnocchi-base]
          type = git
          location = https://github.com/gnocchixyz/gnocchi
          reference = 4.7.0
          
          [ironic-base]
          type = git
          location = https://opendev.org/openstack/ironic
          reference = $BRANCH
          
          [kuryr-base]
          type = git
          location = https://opendev.org/openstack/kuryr
          reference = $BRANCH
          
          [magnum-base]
          type = git
          location = https://opendev.org/openstack/magnum
          reference = $BRANCH
          
          [manila-base]
          type = git
          location = https://opendev.org/openstack/manila
          reference = $BRANCH
          
          [masakari-base]
          type = git
          location = https://opendev.org/openstack/masakari
          reference = $BRANCH
          
          [mistral-base]
          type = git
          location = https://opendev.org/openstack/mistral
          reference = $BRANCH
          
          [octavia-base]
          type = git
          location = https://opendev.org/openstack/octavia
          reference = $BRANCH
          
          [skyline-apiserver]
          type = git
          location = https://opendev.org/openstack/skyline-apiserver
          reference = $BRANCH
          
          [skyline-console]
          type = git
          location = https://opendev.org/openstack/skyline-console
          reference = $BRANCH
          
          [tacker-base]
          type = git
          location = https://opendev.org/openstack/tacker
          reference = $BRANCH
          
          [trove-base]
          type = git
          location = https://opendev.org/openstack/trove
          reference = $BRANCH
          
          [venus-base]
          type = git
          location = https://opendev.org/openstack/venus
          reference = $BRANCH
          
          [watcher-base]
          type = git
          location = https://opendev.org/openstack/watcher
          reference = $BRANCH
          
          [zun-base]
          type = git
          location = https://opendev.org/openstack/zun
          reference = $BRANCH
          
          # Neutron 插件
          [neutron-server-plugin-networking-bgpvpn]
          type = url
          location = https://tarballs.opendev.org/openstack/networking-bgpvpn/networking-bgpvpn-$BRANCH.tar.gz
          enabled = true
          EOF
          
          echo "Generated kolla-build.conf:"
          cat /etc/kolla/kolla-build.conf

      - name: Login to GitHub Container Registry
        if: (github.event_name == 'push' || inputs.push_images == true) && inputs.registry_type != 'harbor'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Login to Harbor Registry
        if: (github.event_name == 'push' || inputs.push_images == true) && inputs.registry_type == 'harbor'
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.harbor_url }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build base images first
        if: matrix.service != 'base' && matrix.service != 'openstack-base'
        run: |
          BUILD_ARGS=""
          if [ "${{ steps.tag.outputs.base_arch }}" = "aarch64" ]; then
            BUILD_ARGS="--platform ${{ steps.tag.outputs.platform }} --base-arch aarch64"
          fi
          
          kolla-build base openstack-base \
            --config-file /etc/kolla/kolla-build.conf \
            $BUILD_ARGS
        continue-on-error: false

      - name: Build service image
        run: |
          BUILD_ARGS=""
          if [ "${{ steps.tag.outputs.base_arch }}" = "aarch64" ]; then
            BUILD_ARGS="--platform ${{ steps.tag.outputs.platform }} --base-arch aarch64"
          fi
          
          kolla-build ${{ matrix.service }} \
            --config-file /etc/kolla/kolla-build.conf \
            $BUILD_ARGS

      - name: Verify image
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          NAMESPACE="${{ needs.prepare.outputs.namespace }}"
          
          if docker images | grep -q "${{ matrix.service }}"; then
            echo "✓ Image built successfully"
            docker images | grep "${{ matrix.service }}"
          else
            echo "✗ Image build failed"
            exit 1
          fi

      - name: Generate SBOM
        if: success()
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          REGISTRY="${{ needs.prepare.outputs.registry }}"
          NAMESPACE="${{ needs.prepare.outputs.namespace }}"
          IMAGE="$REGISTRY/$NAMESPACE/${{ matrix.service }}:$TAG"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            anchore/syft:latest ${IMAGE} -o json > sbom-${{ matrix.service }}.json || true

      - name: Upload SBOM
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}-${{ steps.tag.outputs.tag }}
          path: sbom-${{ matrix.service }}.json
          retention-days: 30
        continue-on-error: true

  summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build summary
        run: |
          echo "# Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Release: ${{ inputs.release || '2025.2' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Distribution: ${{ inputs.base_distro || 'ubuntu' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Architecture: ${{ inputs.base_arch || 'x86_64' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: ${{ needs.prepare.outputs.registry }}/${{ needs.prepare.outputs.namespace }}" >> $GITHUB_STEP_SUMMARY