name: Cleanup Packages

on:
  workflow_dispatch:  # 手动触发工作流

jobs:
  delete-packages:
    runs-on: ubuntu-latest
    permissions:
      packages: write  # 需要包写入权限才能删除包
    steps:
      - name: Get repository info
        id: repo-info
        run: |
          # 获取当前仓库信息
          REPO_FULL_NAME="${{ github.repository }}"
          REPO_NAME=$(echo $REPO_FULL_NAME | cut -d '/' -f 2)
          OWNER="${{ github.repository_owner }}"
          
          # 如果仓库名是特定格式，提取项目前缀
          if [[ "$REPO_NAME" == *"-"* ]]; then
            # 处理常见的仓库名格式
            if [[ "$REPO_NAME" == "openstack-"* ]]; then
              # openstack开头的项目
              PREFIX="openstack"
            elif [[ "$REPO_NAME" == *"-helm"* ]]; then
              # 包含helm的项目
              PREFIX=$(echo $REPO_NAME | sed 's/-helm.*//g')
            elif [[ "$REPO_NAME" == *"-images"* ]]; then
              # 包含images的项目
              PREFIX=$(echo $REPO_NAME | sed 's/-images.*//g')
            else
              # 默认使用第一段作为前缀
              PREFIX=$(echo $REPO_NAME | cut -d '-' -f 1)
            fi
          else
            # 如果仓库名没有连字符，就直接使用仓库名作为前缀
            PREFIX="$REPO_NAME"
          fi
          
          echo "存储库: $REPO_NAME"
          echo "所有者: $OWNER"
          echo "提取的前缀: $PREFIX"
          
          # 设置输出变量
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "prefix=$PREFIX" >> $GITHUB_OUTPUT

      - name: List packages to delete
        id: list-packages
        run: |
          OWNER="${{ steps.repo-info.outputs.owner }}"
          PREFIX="${{ steps.repo-info.outputs.prefix }}"

          echo "将删除所有前缀为 '$PREFIX' 的包"
          
          # 获取组织的所有包
          ORG_PACKAGES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/orgs/$OWNER/packages?package_type=container&per_page=100")
          
          # 获取用户的所有包
          USER_PACKAGES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/user/packages?package_type=container&per_page=100")
          
          # 筛选符合前缀的组织包
          ORG_MATCHED_PACKAGES=$(echo "$ORG_PACKAGES" | jq -r '.[] | .name' | grep -i "^$PREFIX" || echo "")
          
          # 筛选符合前缀的用户包
          USER_MATCHED_PACKAGES=$(echo "$USER_PACKAGES" | jq -r '.[] | .name' | grep -i "^$PREFIX" || echo "")
          
          # 合并并去重
          ALL_MATCHED_PACKAGES=$(echo -e "$ORG_MATCHED_PACKAGES\n$USER_MATCHED_PACKAGES" | sort | uniq | grep -v "^$")
          PACKAGE_COUNT=$(echo "$ALL_MATCHED_PACKAGES" | grep -v "^$" | wc -l)
          
          echo "找到 $PACKAGE_COUNT 个包将被删除:"
          echo "$ALL_MATCHED_PACKAGES" | while read pkg; do
            if [ ! -z "$pkg" ]; then
              echo "- $pkg"
            fi
          done
          
          # 将包列表保存为临时文件
          echo "$ALL_MATCHED_PACKAGES" > /tmp/packages_to_delete.txt

      - name: Confirm before deletion
        id: confirm
        run: |
          PACKAGE_COUNT=$(cat /tmp/packages_to_delete.txt | grep -v "^$" | wc -l)
          
          if [ "$PACKAGE_COUNT" -eq 0 ]; then
            echo "没有找到匹配的包，无需删除"
            echo "should_delete=false" >> $GITHUB_OUTPUT
          else
            echo "将删除 $PACKAGE_COUNT 个包"
            echo "should_delete=true" >> $GITHUB_OUTPUT
          fi

      - name: Delete packages
        if: steps.confirm.outputs.should_delete == 'true'
        run: |
          OWNER="${{ steps.repo-info.outputs.owner }}"
          
          # 读取要删除的包列表
          cat /tmp/packages_to_delete.txt | while read PKG_NAME; do
            if [ -z "$PKG_NAME" ]; then
              continue
            fi
            
            echo "处理包: $PKG_NAME"
            
            # 首先尝试组织范围的包
            echo "  尝试组织范围..."
            ORG_VERSIONS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/orgs/$OWNER/packages/container/$PKG_NAME/versions?per_page=100")
            
            ORG_VERSION_COUNT=$(echo "$ORG_VERSIONS" | jq -r 'length')
            if [ "$ORG_VERSION_COUNT" != "0" ] && [ "$ORG_VERSION_COUNT" != "null" ]; then
              # 删除组织包的所有版本
              for VERSION_ID in $(echo "$ORG_VERSIONS" | jq -r '.[] | .id'); do
                echo "  删除组织版本 ID: $VERSION_ID"
                DELETE_RESPONSE=$(curl -s -X DELETE -w "%{http_code}" \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/orgs/$OWNER/packages/container/$PKG_NAME/versions/$VERSION_ID")
                echo "  版本删除状态码: $DELETE_RESPONSE"
                sleep 0.5
              done
              
              # 尝试删除整个组织包
              echo "  尝试删除整个组织包: $PKG_NAME"
              PKG_DELETE_RESPONSE=$(curl -s -X DELETE -w "%{http_code}" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/orgs/$OWNER/packages/container/$PKG_NAME")
              echo "  包删除状态码: $PKG_DELETE_RESPONSE"
            else
              echo "  组织范围找不到包，尝试用户范围..."
              # 尝试用户范围的包
              USER_VERSIONS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/user/packages/container/$PKG_NAME/versions?per_page=100")
              
              # 删除用户包的所有版本
              for VERSION_ID in $(echo "$USER_VERSIONS" | jq -r '.[] | .id'); do
                echo "  删除用户版本 ID: $VERSION_ID"
                DELETE_RESPONSE=$(curl -s -X DELETE -w "%{http_code}" \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/user/packages/container/$PKG_NAME/versions/$VERSION_ID")
                echo "  版本删除状态码: $DELETE_RESPONSE"
                sleep 0.5
              done
              
              # 尝试删除整个用户包
              echo "  尝试删除整个用户包: $PKG_NAME"
              PKG_DELETE_RESPONSE=$(curl -s -X DELETE -w "%{http_code}" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/user/packages/container/$PKG_NAME")
              echo "  包删除状态码: $PKG_DELETE_RESPONSE"
            fi
            
            # 延迟避免API限制
            sleep 1
          done
          
          echo "所有指定项目的包删除操作完成"